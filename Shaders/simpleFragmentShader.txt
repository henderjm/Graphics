#version 330
in vec2 texture_coordinates;
smooth in vec3 vNormal;
out vec4 outputColor;
in vec3 texcoords;
//uniform sampler basic_texture;
uniform samplerCube cube_texture;
uniform sampler2D gSampler;
uniform vec4 vColor;

struct SimpleDirectionalLight
{
	vec3 vColor;
	vec3 vDirection;
	float fAmbientIntensity;
};
uniform SimpleDirectionalLight sunLight;
void main(){
	//vec4 texel = texture2D (basic_texture, texture_coordinates);
//	texcoords = texture2D(basic_texture, texture_coordinates);
	vec4 vTexColor = texture2D (gSampler, texture_coordinates);
	float fDiffuseIntensity = max(0.0, dot(normalize(vNormal), -sunLight.vDirection));
//	gl_FragColor = texture (cube_texture, texcoords);
	outputColor = vTexColor*vColor*vec4(sunLight.vColor*(sunLight.fAmbientIntensity+fDiffuseIntensity), 1.0);
}